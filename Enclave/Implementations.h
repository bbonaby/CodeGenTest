// This file was auto-generated by edlcodegen.exe
// Changes to this file may be lost if the file is regenerated.
#pragma once
#include <VbsEnclaveABI\Enclave\EnclaveHelpers.h>
#include "DeveloperTypes.h"

using namespace VbsEnclaveABI;
using namespace VbsEnclaveABI::Shared;
using namespace VbsEnclaveABI::Enclave;
using namespace DeveloperTypes;


namespace CodeGenTest
{
    namespace VTL1_Declarations
    {
        
        /*******************************************************
         *    VTL1 Generated Developer Function Declarations   *
        ********************************************************/
        
        HRESULT TestFunc(_In_  bool arg1, _In_ const uint32_t* arg2, _Inout_  int32_t* arg3, _Out_  std::unique_ptr<uint64_t>& arg4, _Inout_  StructWithPointers& arg5, _Out_  std::unique_ptr<StructWithPointers>& arg6, _Inout_  std::vector<StructWithPointers>& arg7, _Out_  std::vector<std::int16_t>& arg8, _Out_  std::array<std::wstring, 2>& arg9);

    }

    namespace VTL0_Callbacks
    {
        using namespace VbsEnclaveABI::Shared::Converters;

        
        /**********************************************************
         *    VTL1 Side Of VTL0 Developer Method Implementations  *
        ***********************************************************/

        inline HRESULT TestFunc_callback(_In_  bool arg1, _In_ const uint32_t* arg2, _Inout_  int32_t* arg3, _Out_  std::unique_ptr<uint64_t>& arg4, _Inout_  StructWithPointers& arg5, _Out_  std::unique_ptr<StructWithPointers>& arg6, _Inout_  std::vector<StructWithPointers>& arg7, _Out_  std::vector<std::int16_t>& arg8, _Out_  std::array<std::wstring, 2>& arg9)
        {
            // Package in and in/out parameters into struct and convert it to a flatbuffer type.
            FlatbuffersDevTypes::TestFunc1_argsT in_flatbufferT {};
            in_flatbufferT.m_arg1 = ConvertType<decltype(in_flatbufferT.m_arg1)>(arg1);
            in_flatbufferT.m_arg2 = ConvertType<decltype(in_flatbufferT.m_arg2)>(arg2);
            in_flatbufferT.m_arg3 = ConvertType<decltype(in_flatbufferT.m_arg3)>(arg3);
            in_flatbufferT.m_arg5 = ConvertType<decltype(in_flatbufferT.m_arg5)>(arg5);
            in_flatbufferT.m_arg7 = ConvertType<decltype(in_flatbufferT.m_arg7)>(arg7);
            in_flatbufferT.m_arg9 = ConvertType<decltype(in_flatbufferT.m_arg9)>(arg9);

            using ParamsT = decltype(in_flatbufferT);
            auto flatbuffer_builder = PackFlatbuffer(in_flatbufferT);
            using ReturnParamsT = FlatbuffersDevTypes::TestFunc1_argsT;
            auto function_result = ReturnParamsT();
            THROW_IF_FAILED((CallVtl0CallbackFromVtl1<ParamsT, ReturnParamsT>("CodeGenTest::CodeGenTestClass::TestFunc1_Generated_Stub", flatbuffer_builder, function_result)));
            
            auto return_params = ConvertStruct<TestFunc1_args>(function_result);
                 
            if (arg3 && return_params.m_arg3)
            {
                *arg3 = *return_params.m_arg3;
            }
     
            if (return_params.m_arg4)
            {
                arg4 = std::move(return_params.m_arg4);
            }
     
            arg5 = std::move(return_params.m_arg5);
     
            if (return_params.m_arg6)
            {
                arg6 = std::move(return_params.m_arg6);
            }
     
            arg7 = std::move(return_params.m_arg7);
     
            arg8 = std::move(return_params.m_arg8);
     
            arg9 = std::move(return_params.m_arg9);
             
            return return_params.m__return_value_;

        }

    }

    namespace AbiDefinitions
    {
        using namespace VbsEnclaveABI::Shared::Converters;

        
        /*****************************************************
         *    VTL0 Generated ABI Implementation Callbacks    *
        ******************************************************/
        
        static inline void TestFunc0_Abi_Impl(_In_ FlatbuffersDevTypes::TestFunc0_argsT& in_flatbuffer_params, _In_ flatbuffers::FlatBufferBuilder& flatbuffer_out_params_builder)
        {
            auto dev_type_params = ConvertStruct<TestFunc0_args>(in_flatbuffer_params);
            dev_type_params.m__return_value_ = VTL1_Declarations::TestFunc( dev_type_params.m_arg1, dev_type_params.m_arg2.get(), dev_type_params.m_arg3.get(), dev_type_params.m_arg4, dev_type_params.m_arg5, dev_type_params.m_arg6, dev_type_params.m_arg7, dev_type_params.m_arg8, dev_type_params.m_arg9);

            auto flatbuffer_out_param = ConvertStruct<decltype(in_flatbuffer_params)>(dev_type_params);
            flatbuffer_out_params_builder = PackFlatbuffer(flatbuffer_out_param);
        }

    }
}
