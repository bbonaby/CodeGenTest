// This file was auto-generated by edlcodegen.exe
// Changes to this file may be lost if the file is regenerated.

#pragma once
#include <VbsEnclaveABI\Shared\VbsEnclaveAbiBase.h>
#undef max // prevent windows max macro from conflicting with flatbuffers macro
#include "vbsenclave_flatbuffer_support_generated.h"
#include <VbsEnclaveABI\Shared\ConversionHelpers.h>


namespace DeveloperTypes
{

struct TestStruct1;

struct NestedStructWithPointers;

struct StructWithPointers;

struct TestStruct1
{
    std::int64_t int64_val {};
    std::uint64_t uint64_val {};
    std::array<std::int64_t, 5> array1 {};
};

struct NestedStructWithPointers
{
    std::unique_ptr<int32_t> int32_ptr {};
    std::unique_ptr<TestStruct1> struct_ptr {};
};

struct StructWithPointers
{
    std::unique_ptr<NestedStructWithPointers> nested_struct_ptr {};
};

struct TestFunc0_args
{
    HRESULT m__return_value_ {};
    bool m_arg1 {};
    std::unique_ptr<uint32_t> m_arg2 {};
    std::unique_ptr<int32_t> m_arg3 {};
    std::unique_ptr<uint64_t> m_arg4 {};
    StructWithPointers m_arg5 {};
    std::unique_ptr<StructWithPointers> m_arg6 {};
    std::vector<StructWithPointers> m_arg7 {};
    std::vector<std::int16_t> m_arg8 {};
    std::array<std::wstring, 2> m_arg9 {};
};

struct TestFunc1_args
{
    HRESULT m__return_value_ {};
    bool m_arg1 {};
    std::unique_ptr<uint32_t> m_arg2 {};
    std::unique_ptr<int32_t> m_arg3 {};
    std::unique_ptr<uint64_t> m_arg4 {};
    StructWithPointers m_arg5 {};
    std::unique_ptr<StructWithPointers> m_arg6 {};
    std::vector<StructWithPointers> m_arg7 {};
    std::vector<std::int16_t> m_arg8 {};
    std::array<std::wstring, 2> m_arg9 {};
};

}

// Struct metadata
namespace VbsEnclaveABI::Shared::Converters
{

template <>
struct StructMetadata<DeveloperTypes::TestStruct1>
{
    static constexpr auto members = std::make_tuple(&DeveloperTypes::TestStruct1::int64_val,&DeveloperTypes::TestStruct1::uint64_val,&DeveloperTypes::TestStruct1::array1);
};

template <>
struct StructMetadata<FlatbuffersDevTypes::TestStruct1T>
{
    static constexpr auto members = std::make_tuple(&FlatbuffersDevTypes::TestStruct1T::int64_val,&FlatbuffersDevTypes::TestStruct1T::uint64_val,&FlatbuffersDevTypes::TestStruct1T::array1);
};

template <>
struct StructMetadata<DeveloperTypes::NestedStructWithPointers>
{
    static constexpr auto members = std::make_tuple(&DeveloperTypes::NestedStructWithPointers::int32_ptr,&DeveloperTypes::NestedStructWithPointers::struct_ptr);
};

template <>
struct StructMetadata<FlatbuffersDevTypes::NestedStructWithPointersT>
{
    static constexpr auto members = std::make_tuple(&FlatbuffersDevTypes::NestedStructWithPointersT::int32_ptr,&FlatbuffersDevTypes::NestedStructWithPointersT::struct_ptr);
};

template <>
struct StructMetadata<DeveloperTypes::StructWithPointers>
{
    static constexpr auto members = std::make_tuple(&DeveloperTypes::StructWithPointers::nested_struct_ptr);
};

template <>
struct StructMetadata<FlatbuffersDevTypes::StructWithPointersT>
{
    static constexpr auto members = std::make_tuple(&FlatbuffersDevTypes::StructWithPointersT::nested_struct_ptr);
};

template <>
struct StructMetadata<DeveloperTypes::TestFunc0_args>
{
    static constexpr auto members = std::make_tuple(&DeveloperTypes::TestFunc0_args::m__return_value_,&DeveloperTypes::TestFunc0_args::m_arg1,&DeveloperTypes::TestFunc0_args::m_arg2,&DeveloperTypes::TestFunc0_args::m_arg3,&DeveloperTypes::TestFunc0_args::m_arg4,&DeveloperTypes::TestFunc0_args::m_arg5,&DeveloperTypes::TestFunc0_args::m_arg6,&DeveloperTypes::TestFunc0_args::m_arg7,&DeveloperTypes::TestFunc0_args::m_arg8,&DeveloperTypes::TestFunc0_args::m_arg9);
};

template <>
struct StructMetadata<FlatbuffersDevTypes::TestFunc0_argsT>
{
    static constexpr auto members = std::make_tuple(&FlatbuffersDevTypes::TestFunc0_argsT::m__return_value_,&FlatbuffersDevTypes::TestFunc0_argsT::m_arg1,&FlatbuffersDevTypes::TestFunc0_argsT::m_arg2,&FlatbuffersDevTypes::TestFunc0_argsT::m_arg3,&FlatbuffersDevTypes::TestFunc0_argsT::m_arg4,&FlatbuffersDevTypes::TestFunc0_argsT::m_arg5,&FlatbuffersDevTypes::TestFunc0_argsT::m_arg6,&FlatbuffersDevTypes::TestFunc0_argsT::m_arg7,&FlatbuffersDevTypes::TestFunc0_argsT::m_arg8,&FlatbuffersDevTypes::TestFunc0_argsT::m_arg9);
};

template <>
struct StructMetadata<DeveloperTypes::TestFunc1_args>
{
    static constexpr auto members = std::make_tuple(&DeveloperTypes::TestFunc1_args::m__return_value_,&DeveloperTypes::TestFunc1_args::m_arg1,&DeveloperTypes::TestFunc1_args::m_arg2,&DeveloperTypes::TestFunc1_args::m_arg3,&DeveloperTypes::TestFunc1_args::m_arg4,&DeveloperTypes::TestFunc1_args::m_arg5,&DeveloperTypes::TestFunc1_args::m_arg6,&DeveloperTypes::TestFunc1_args::m_arg7,&DeveloperTypes::TestFunc1_args::m_arg8,&DeveloperTypes::TestFunc1_args::m_arg9);
};

template <>
struct StructMetadata<FlatbuffersDevTypes::TestFunc1_argsT>
{
    static constexpr auto members = std::make_tuple(&FlatbuffersDevTypes::TestFunc1_argsT::m__return_value_,&FlatbuffersDevTypes::TestFunc1_argsT::m_arg1,&FlatbuffersDevTypes::TestFunc1_argsT::m_arg2,&FlatbuffersDevTypes::TestFunc1_argsT::m_arg3,&FlatbuffersDevTypes::TestFunc1_argsT::m_arg4,&FlatbuffersDevTypes::TestFunc1_argsT::m_arg5,&FlatbuffersDevTypes::TestFunc1_argsT::m_arg6,&FlatbuffersDevTypes::TestFunc1_argsT::m_arg7,&FlatbuffersDevTypes::TestFunc1_argsT::m_arg8,&FlatbuffersDevTypes::TestFunc1_argsT::m_arg9);
};

}

