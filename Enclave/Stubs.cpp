// This file was auto-generated by edlcodegen.exe
// Changes to this file may be lost if the file is regenerated.
#pragma once
#include <VbsEnclaveABI\Enclave\EnclaveHelpers.h>
#include "Implementations.h"

using namespace VbsEnclaveABI;
using namespace VbsEnclaveABI::Shared;
using namespace VbsEnclaveABI::Enclave;
using namespace DeveloperTypes;


namespace CodeGenTest
{
    namespace VTL1_Stubs
    {
        static void EnforceMemoryRestriction()
        {
            if (ENABLE_ENCLAVE_RESTRICT_CONTAINING_PROCESS_ACCESS)
            {
                EnableEnclaveRestrictContainingProcessAccessOnce();
            }
        }
    
        /***********************************************
         *    VTL1 Generated ABI Boundary Callbacks    *
        ************************************************/
        
        void* TestFunc0_Generated_Stub(void* function_context)
        try
        {
            using ParamsT = FlatbuffersDevTypes::TestFunc0_argsT;
            using ReturnParamsT = FlatbuffersDevTypes::TestFunc0_argsT;
            EnforceMemoryRestriction();
            HRESULT hr = CallVtl1ExportFromVtl1<ParamsT, decltype(AbiDefinitions::TestFunc0_Abi_Impl)>(function_context, AbiDefinitions::TestFunc0_Abi_Impl);
            LOG_IF_FAILED(hr);
            return ABI_HRESULT_TO_PVOID(hr);
        }
        catch (...)
        {
            HRESULT hr = wil::ResultFromCaughtException();
            LOG_IF_FAILED(hr);
            return ABI_HRESULT_TO_PVOID(hr);
        }

        void RegisterVtl0Callbacks(
            _In_ FlatbuffersDevTypes::AbiRegisterVtl0Callbacks_argsT in_params,
            _Inout_ flatbuffers::FlatBufferBuilder& flatbuffer_out_params_builder)
        {
            THROW_IF_FAILED(AddVtl0FunctionsToTable(in_params.callback_addresses, in_params.callback_names));

            FlatbuffersDevTypes::AbiRegisterVtl0Callbacks_argsT  result{};
            result.m__return_value_ = S_OK;

            flatbuffer_out_params_builder = PackFlatbuffer(result);
        }

        void* __AbiRegisterVtl0Callbacks_CodeGenTest__(void* function_context)
        try
        {
            EnforceMemoryRestriction();
            using ParamsT = FlatbuffersDevTypes::AbiRegisterVtl0Callbacks_argsT;
            HRESULT hr = CallVtl1ExportFromVtl1<ParamsT, decltype(RegisterVtl0Callbacks)>(function_context, RegisterVtl0Callbacks);
            LOG_IF_FAILED(hr);
            return ABI_HRESULT_TO_PVOID(hr);
        }
        catch (...)
        {
            HRESULT hr = wil::ResultFromCaughtException();
            LOG_IF_FAILED(hr);
            return ABI_HRESULT_TO_PVOID(hr);
        }

    }
}
